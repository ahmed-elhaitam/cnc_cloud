import streamlit as st
import pandas as pd

def search_by_keyword(df, keyword):
    """
    Recherche de formations par mot-cl√© dans les colonnes binaires
    
    Args:
        df (pd.DataFrame): DataFrame avec colonnes binaires
        keyword (str): Mot-cl√© de recherche
    
    Returns:
        pd.DataFrame: Formations correspondantes
    """
    # Convertir le mot-cl√© en minuscules
    keyword = keyword.lower()
    
    # Rechercher dans les colonnes binaires
    binary_columns = [col for col in df.columns if col not in ['Institution', 'Formation', 'D√©bouch√©s', 'Preprocessed Debouches']]
    
    # Colonnes o√π le mot-cl√© est pr√©sent
    matching_columns = [col for col in binary_columns if keyword in col.lower()]
    
    # Filtrer les lignes o√π ces colonnes sont √† 1
    if matching_columns:
        results = df[df[matching_columns].eq(1).any(axis=1)]
        return results[['Institution', 'Formation', 'D√©bouch√©s']]
    else:
        return pd.DataFrame(columns=['Institution', 'Formation', 'D√©bouch√©s'])

def main():
    # Titre de l'application
    st.title("üîç Recherche de Formations par Mot-Cl√©")
    
    # Charger les donn√©es
    @st.cache_data
    def load_data():
        # Charger directement depuis le chemin du fichier
        return pd.read_csv('formation.csv')  # Remplacez par le chemin r√©el
    
    # G√©rer les erreurs de chargement
    try:
        df = load_data()
    except Exception as e:
        st.error(f"Erreur de chargement des donn√©es : {e}")
        return
    
    # Informations sur le dataset
    st.sidebar.header("Informations du Dataset")
    st.sidebar.write(f"Nombre total de formations : {len(df)}")
    st.sidebar.write(f"Colonnes disponibles : {', '.join(df.columns)}")
    
    # Champ de saisie pour le mot-cl√©
    st.sidebar.header("Recherche de Formations")
    keyword = st.sidebar.text_input("Entrez un mot-cl√©")
    
    # Bouton de recherche
    if st.sidebar.button("Rechercher"):
        if keyword:
            # Rechercher les formations
            results = search_by_keyword(df, keyword)
            
            # Afficher les r√©sultats
            if not results.empty:
                st.success(f"‚úÖ {len(results)} formation(s) trouv√©e(s)")
                st.dataframe(results)
            else:
                st.warning("‚ùå Aucune formation trouv√©e pour ce mot-cl√©")
        else:
            st.warning("Veuillez saisir un mot-cl√©")
    
    # Section informative
    st.sidebar.info("""
    ### Comment utiliser l'application
    - Saisissez un mot-cl√© dans le champ de recherche
    - La recherche se fait sur les colonnes binaires pr√©trait√©es
    - Les r√©sultats sont affich√©s en temps r√©el
    """)

# Ex√©cuter l'application
if __name__ == "__main__":
    main()
